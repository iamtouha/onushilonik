generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
 
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
     
}

model VerificationToken {
    identifier      String
    token           String   @unique
    expires         DateTime

    @@unique([identifier, token])
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    role            USER_ROLE @default(USER)
    subscription    Subscription? @relation("subscriber")
    accounts        Account[]
    sessions        Session[]
    active          Boolean   @default(true)
    answerSheets    AnswerSheet[]
    comments        Comment[]
    subscriptionsUpdated Subscription[] @relation("sub_updater")
    subjectsCreated Subject[] @relation("subject_creator")
    subjectsUpdated Subject[] @relation("subject_updater")
    chaptersCreated Chapter[] @relation("chapter_creator")
    chaptersUpdated Chapter[] @relation("chapter_updater")
    questionsCreated Question[] @relation("question_creator")
    questionsUpdated Question[] @relation("question_updater")
    setsCreated     QuestionSet[] @relation("set_creator")
    setsUpdated     QuestionSet[] @relation("set_updater")
    notesCreated    Note[] @relation("note_creator")
    notesUpdated    Note[] @relation("note_updater")
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

enum USER_ROLE {
    SUPER_ADMIN
    ADMIN
    USER
}

model Subscription {
    id              String   @id @default(cuid())
    userId          String   @unique
    user            User     @relation("subscriber",fields: [userId], references: [id], onDelete: Cascade)
    phoneNumber     String?
    payments        Payment[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    updatedBy       User?    @relation("sub_updater", fields: [updatedById], references: [id])
    updatedById     String? 
}

model Payment {
    id              String   @id @default(cuid())
    subscriptionId  String
    subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
    status          PAYMENT_STATUS @default(PENDING)
    method          PAYMENT_METHOD
    currency        CURRENCY @default(BDT)
    plan            PLAN @default(MONTHLY)
    paymentId       String
    transactionId   String @unique
    approvedAt      DateTime?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

enum CURRENCY {
    BDT
}
enum PAYMENT_METHOD {
    BKASH
    ROCKET
    NAGAD
}
enum PAYMENT_STATUS {
    PENDING
    SUCCESS
    FAILED
}
enum PLAN {
    MONTHLY
    QUARTERLY
}

model Subject {
    id              String   @id @default(cuid())
    code            String   @unique
    title           String
    published       Boolean  @default(true)
    chapters        Chapter[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    createdBy       User?    @relation("subject_creator", fields: [createdById], references: [id], onDelete:NoAction )
    createdById     String?
    updatedBy       User?    @relation("subject_updater", fields: [updatedById], references: [id], onDelete:NoAction )
    updatedById     String?
}

model Chapter {
    id              String   @id @default(cuid())
    code            String   @unique
    title           String
    published       Boolean  @default(true)
    subject         Subject  @relation(fields: [subjectId], references: [id])
    subjectId       String
    questions       Question[]
    notes           Note[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    createdBy       User?    @relation("chapter_creator", fields: [createdById], references: [id], onDelete:NoAction )
    createdById     String?
    updatedBy       User?    @relation("chapter_updater", fields: [updatedById], references: [id], onDelete:NoAction )
    updatedById     String?
}


model Question {
    id              String   @id @default(cuid())
    code            String   @unique
    stem            String   @db.Text
    chapter         Chapter  @relation(fields: [chapterId], references: [id])
    chapterId       String
    optionA         String
    optionB         String
    optionC         String
    optionD         String
    correctOption   OPTION
    published       Boolean  @default(true)
    answers         Answer[]
    questionSets    QuestionsOnSets[]
    comments        Comment[]
    note            Note?    @relation(fields: [noteId], references: [id])
    noteId          String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    createdBy       User?    @relation("question_creator", fields: [createdById], references: [id], onDelete:NoAction )
    createdById     String?
    updatedBy       User?    @relation("question_updater", fields: [updatedById], references: [id], onDelete:NoAction )
    updatedById     String? 
}

model QuestionSet {
    id              String   @id @default(cuid())
    code            String   @unique
    title           String
    type            SET_TYPE
    questions       QuestionsOnSets[]
    answerSheets    AnswerSheet[]
    published       Boolean  @default(true)
    trial           Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    createdBy       User?    @relation("set_creator", fields: [createdById], references: [id], onDelete:NoAction )
    createdById     String?
    updatedBy       User?    @relation("set_updater", fields: [updatedById], references: [id], onDelete:NoAction )
    updatedById     String?
}

model QuestionsOnSets {
    questionSet     QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
    questionSetId   String
    question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId      String
    order           Int
    @@id([questionSetId, questionId])

}

enum SET_TYPE {
    MODEL_TEST
    PREVIOUS_YEAR_QUESTION
    QUESTION_BANK
}

model Note {
    id              String   @id @default(cuid())
    title           String
    code            String   @unique
    chapter         Chapter  @relation(fields: [chapterId], references: [id])
    chapterId       String
    published       Boolean  @default(true)
    content         String   @db.Text
    questions       Question[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    createdBy       User?    @relation("note_creator", fields: [createdById], references: [id], onDelete:NoAction )
    createdById     String?
    updatedBy       User?    @relation("note_updater", fields: [updatedById], references: [id], onDelete:NoAction )
    updatedById     String?
}

model Comment {
    id              String   @id @default(cuid())
    content         String   @db.Text
    question        Question @relation(fields: [questionId], references: [id])
    questionId      String
    user            User     @relation(fields: [userId], references: [id])
    userId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}


model AnswerSheet {
    id              String   @id @default(cuid())
    code            String   @unique
    user            User     @relation(fields: [userId], references: [id])
    userId          String
    questionSet     QuestionSet @relation(fields: [questionSetId], references: [id])
    questionSetId   String
    answers         Answer[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Answer {
    id              String   @id @default(cuid())
    option          OPTION
    question        Question @relation(fields: [questionId], references: [id])
    answerSheet     AnswerSheet @relation(fields: [answerSheetId], references: [id])
    answerSheetId   String
    questionId      String
    createdAt       DateTime @default(now())
}

enum OPTION {
    A
    B
    C
    D
}

